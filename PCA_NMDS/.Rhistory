geom_point(data=centroids, size = centroid_size, shape = centroid_shape )
}
}
# if ellipse with user defined type and confidence level should be drawn
if(Plot_ellipse == TRUE){
p <- p + stat_ellipse(geom = "polygon", alpha = 0.3, level = confidence_percentage, type = ellipse_type)
}
p <- p + coord_equal() +
theme_bw() +
theme(axis.text.x = element_text(colour="Black",size=8,angle=0,hjust=0.5,vjust=0,face="bold"),
axis.text.y = element_text(colour="black",size=8,angle=0,hjust=1,vjust=0.5,face="bold"),
axis.title.x = element_text(colour="Black",size=8,angle=0,hjust=0.5,vjust=-1,face="bold"),
axis.title.y = element_text(colour="Black",size=8,angle=90,hjust=0.5,vjust=1,face="bold"),
plot.title = element_text(colour="black",size=10,angle=0,hjust=0.5,vjust=2,face="bold"),
legend.title = element_text(colour="black",size=8,angle=0,hjust=0,vjust=2,face="bold"),
legend.text = element_text(colour="black",size=8,angle=0,hjust=0,vjust=0.5,face="bold"),
panel.background = element_rect(fill = Background_colour), legend.background = element_rect(fill = Background_colour))
## if grid should be shown in plot
if(grid_visible == FALSE){
p <- p + theme(panel.grid.minor = element_blank(),panel.grid.major = element_blank())
}
p <- p + guides(fill=guide_legend(title="Sample Group"), colour=guide_legend(title="Sample Group"))
p <- p +  ggtitle(paste("NMDS of ",Export_name,"\n ( P-value =",stat_p, "  Stress",round(dats.mds$stress,3),")"))
p <- p + theme(aspect.ratio=1)
#if group colours defined
if(Define_group_colours == TRUE) {
p <- p + scale_fill_manual(values= Group_colours) + scale_colour_manual(values= Group_colours)
}
#if sample labels wanted
if(label_samples_in_plot == TRUE){
p <- p + geom_text(data=df_connect_p,aes(x=NMDS1,y=NMDS2,label=Sample), size = label_size,hjust=0.5, vjust=1.3)
}
# Stress values >0.2 are generally poor and potentially uninterpretable, whereas values <0.1 are good and <0.05 are excellent
print(p)
ggsave(file=file.path(paste(results_folder,"/NMDS.emf",sep="")), width = plot_width, height = plot_width, units = c("cm"))
ggsave(file=file.path(paste(results_folder,"/NMDS.pdf",sep="")), width = plot_width, height = plot_width, units = c("cm"))
############################ NMDS-plot pairwise
# Do you wish pairwise nmds plots
if(pairwise_nmds_plots == TRUE){
# make seperate results folder
dir.create(path=paste(getwd(),"/_Results_PCA_data_separation-",Export_name,"/pairwise_nmds",sep=""))
results_folder_nmds <- paste(getwd(),"/_Results_PCA_data_separation-",Export_name,"/pairwise_nmds",sep="")
# Seperate groups
library(stringr)
posthoc_group_data <- cbind(str_split_fixed(posthoc_permanova$pairs, " vs ", 2),posthoc_permanova)
posthoc_group_data[,1] <- as.character(posthoc_group_data[,1])
posthoc_group_data[,2] <- as.character(posthoc_group_data[,2])
#Start loop for pairwise analysis, figures and export
for(i in 1:nrow(posthoc_group_data))
{
Group_1 <- posthoc_group_data[i,1]
Group_2 <- posthoc_group_data[i,2]
#subset for the groups in pairwise comparison
posthoc_data <- subset(calculation_data, Group %in% c(Group_1,Group_2))
#remove zerio columns
posthoc_data[is.na(posthoc_data)] <- 0
posthoc_data <- posthoc_data[ , colSums(posthoc_data != 0) != 0]
rownames(posthoc_data) <- 1:nrow(posthoc_data)
#Grouping data change number of columns as applicable
meta_data <- posthoc_data[,1:2]
sample <- c(posthoc_data[,1])
all_data <- posthoc_data
# data for nmds change star column as applicable
value_data <- posthoc_data[,3:ncol(posthoc_data)]
# number of columns
col_nr<- as.numeric(ncol(all_data))
#NMDS calculation
dats.mds<-metaMDS(value_data,  distance="bray", k=2, autotransform=T, zerodist="add")
#Calculate significance CHANGE Column start CHANGE Grouping (raw_data$...)
stat_p <- round(as.numeric(posthoc_permanova[i,5]), digits = 5)
#Preparing data for plotting
data.scores <- as.data.frame(scores(dats.mds)$sites)  #Using the scores function from vegan to extract the site scores and   convert to a data.frame
plot_data <- cbind(data.scores,meta_data)
grp <- plot_data$Group  #### CHANGE to required grouping plot_data$.....
data_plot <- cbind(plot_data,grp)
data_plot <- data_plot[with(data_plot, order(grp,NMDS1,NMDS2)), ]
centroids <- aggregate(cbind(NMDS1,NMDS2)~Group,data_plot,mean)
df_connect_p <- merge(data_plot,aggregate(cbind(mean.NMDS1=NMDS1,mean.NMDS2=NMDS2)~Group,data_plot,mean),by="Group")
#Plot# PLOT DATA: If fill colour for shape possible add black edge to points
if(point_colour_black == TRUE){
p <- ggplot(df_connect_p, aes(x=NMDS1, y=NMDS2, color= Group, fill= Group))+
geom_point(aes(fill=Group),size=point_size, shape = point_shape, colour="Black")
}else{
p <- ggplot(df_connect_p, aes(x=NMDS1, y=NMDS2, color=Group, fill=Group))+
geom_point(aes(fill=Group, colour=Group),size=point_size, shape = point_shape)
}
# if centroids to be plotted and if connencting lines between centroids and data points
if(Plot_centroid == TRUE){
if(Connect_points == TRUE){
p <- p +
geom_point(aes(x=mean.NMDS1,y=mean.NMDS2),size=centroid_size, shape = centroid_shape)+
geom_segment(aes(x=mean.NMDS1, y=mean.NMDS2, xend=NMDS1, yend=NMDS2))
}else{ #Plot only centroids without connecting lines
p <- p +
geom_point(data=centroids, size = centroid_size, shape = centroid_shape )
}
}
# if ellipse with user defined type and confidence level should be drawn
if(Plot_ellipse == TRUE){
p <- p + stat_ellipse(geom = "polygon", alpha = 0.3,level = confidence_percentage, type = ellipse_type)
}
p <- p + coord_equal() +
theme_bw() +
theme(axis.text.x = element_text(colour="Black",size=8,angle=0,hjust=0.5,vjust=0,face="bold"),
axis.text.y = element_text(colour="black",size=8,angle=0,hjust=1,vjust=0.5,face="bold"),
axis.title.x = element_text(colour="Black",size=8,angle=0,hjust=0.5,vjust=-1,face="bold"),
axis.title.y = element_text(colour="Black",size=8,angle=90,hjust=0.5,vjust=1,face="bold"),
plot.title = element_text(colour="black",size=10,angle=0,hjust=0.5,vjust=2,face="bold"),
legend.title = element_text(colour="black",size=8,angle=0,hjust=0,vjust=2,face="bold"),
legend.text = element_text(colour="black",size=8,angle=0,hjust=0,vjust=0.5,face="bold"),
panel.background = element_rect(fill = Background_colour), legend.background = element_rect(fill = Background_colour))
## if grid should be shown in plot
if(grid_visible == FALSE){
p <- p + theme(panel.grid.minor = element_blank(),panel.grid.major = element_blank())
}
p <- p + guides(fill=guide_legend(title="Sample Group"), colour=guide_legend(title="Sample Group"))
p <- p +  ggtitle(paste("NMDS of ",Export_name,"\n ( P-value =",stat_p, "  Stress",round(dats.mds$stress,3),")"))
p <- p + theme(aspect.ratio=1)
#if group colours defined
if(point_colour_black == TRUE){
if(Define_group_colours == TRUE) {
p <- p + scale_fill_manual(values= Group_colours) + scale_colour_manual(values= Group_colours)
}
}else{
if(Define_group_colours == TRUE) {
p <- p + scale_fill_manual(values= Group_colours) + scale_colour_manual(values= Group_colours)
}
}
#if sample labels wanted
if(label_samples_in_plot == TRUE){
p <- p + geom_text(data=df_connect_p,aes(x=NMDS1,y=NMDS2,label=Sample), size = label_size,hjust=0.5, vjust=1.3)
}
# Stress values >0.2 are generally poor and potentially uninterpretable, whereas values <0.1 are good and <0.05 are excellent
print(p)
ggsave(file=file.path(paste(results_folder_nmds,"/NMDS_pairwise_",Group_1,"_vs_",Group_2,".emf",sep="")), width = plot_width, height = plot_width, units = c("cm"))
ggsave(file=file.path(paste(results_folder_nmds,"/NMDS_pairwise_",Group_1,"_vs_",Group_2,".pdf",sep="")), width = plot_width, height = plot_width, units = c("cm"))
#end of For loop
}
# end of if statement if pairwise nmds plots should be done
}
```
#### Data summary
prepare sheet for each group with data summary including for each analyte mean, SD, SEM, cv, and number of samples identified in
```{r}
####################### Data analysis and exporting of data
###### Seperate into groups
data <- calculation_data
# For mean and SD, SE calculation 0 seen as missing value
if (convert_to_NA == TRUE){data[data == 0] <- NA}
# Get sample group names
Group_names <- unique(as.vector(data$Group))
# Number of sample groups
Number_of_Groups <- as.numeric(length (Group_names))
for(i in 1:Number_of_Groups)
{
Group_name <- Group_names[i]
data_sub <- data[data[,2]== Group_name,]
# SD of samples
index_sd <- 3
SD <- sd(na.omit(c(data_sub[,3])))
repeat
{
index_sd <- 1 + index_sd
SD_2 <- sd(na.omit(c(data_sub[,(index_sd)])))
SD <- cbind(SD,SD_2)
if (index_sd == ncol(data_sub))
break;
}
# Mean of samples
index_mean <- 3
Mean_value <- mean(na.omit(c(data_sub[,3])))
repeat
{
index_mean <- 1 + index_mean
Mean_value_2 <- mean(na.omit(c(data_sub[,(index_mean)])))
Mean_value <- cbind(Mean_value,Mean_value_2)
if (index_mean == ncol(data_sub))
break;
}
# Counting samples including zero values but omitting NA
index_count <- 3
Count_value <- sum(as.numeric(na.omit(c(data_sub[,3]))>=0))
repeat
{
index_count <- 1 + index_count
Count_value_2 <- sum(as.numeric(na.omit(c(data_sub[,index_count])))>=0)
Count_value <- cbind(Count_value,Count_value_2)
if (index_count == ncol(data_sub))
break;
}
# adding SD, mean and count as well as Standard error of mean (SEM) and CV together with data
CV <-as.data.frame((t(SD)/t(Mean_value)))
SEM <- as.data.frame(t(SD)/sqrt(t(Count_value)))
SD <- as.data.frame(SD)
Mean_value<- as.data.frame(Mean_value)
Count_value <- as.data.frame(Count_value)
sample_names <- as.character(data_sub[,1])
data_sub_results <- cbind(t(Mean_value),t(SD),SEM,CV,t(Count_value),t(data_sub[3:ncol(data_sub)]))
colnames(data_sub_results) <- c(paste("Mean",Group_name),paste("SD",Group_name),paste("SEM",Group_name),paste("CV",Group_name),paste("ID in number of ",Group_name),sample_names)
rownames(data_sub_results) <- colnames(data_sub)[3:ncol(data_sub)]
#Merge data with analyte names
rownames(Analyte_mapping) <- Analyte_mapping[,1]
data_sub_results_2 <- merge(Analyte_mapping,data_sub_results, by="row.names")
data_sub_results_final <- data_sub_results_2[,3:ncol(data_sub_results_2)]
# Export results data for each sample group
write.csv(data_sub_results_final,file=file.path(paste(results_folder,sep="",paste("/",Export_name,"_Sample_group-",Group_name,".csv",sep=""))),row.names=FALSE)
}
```
#### Export script settings
```{r}
## Export settings used
# make settings data frame
settings_parameters <- c("Zero values converted to NA:",
"For pairwise statistics p-value adjustment method used:",
"PCA data centred:",
"PCA data scaled:",
"Plot ellipses:",
"Ellipse confidence level:",
"Ellipse type:",
"NMDS data autotransformed:")
settings <-c(convert_to_NA, p_adjust_methods, PCA_centre, PCA_scale, Plot_ellipse, confidence_percentage, ellipse_type, NMDS_auto_transform)
settings_data <- as.data.frame(cbind(settings_parameters, settings))
colnames(settings_data) <- c("Parameters", "Settings")
# export settings
write.csv(settings_data,file=file.path(paste(results_folder,sep="",paste("/R_script-2_settings-",Export_name,".csv",sep=""))),row.names=FALSE)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
shiny::runApp()
runApp()
runApp('~/Downloads')
runApp('~/Downloads')
runApp('~/Downloads')
runApp('~/Documents/UFZ/old_app.R')
###############################################################################
###############################################################################
###############################################################################
####
#### Biocaratis Script 2: PCA and NMDS of data from script 1 and seperation of
####                      data into groups, and calculation of men, SD, SEM, CV
####                      number of samples
####
#### chooses which values are picked and optional is normalisation of data
#### INPUT: CSV from Biocratis script 1 and OPTIONAL: CSV with group colours
####
####
###############################################################################
###############################################################################
###############################################################################
## load required packages
if(require(gplots)==F){install.packages('gplots')}
if(require(ggplot2)==F){install.packages('ggplot2')}
if(require(dplyr)==F){install.packages('dplyr')}
if(require(miscTools)==F){install.packages('miscTools')}
if(require(vegan)==F){install.packages('vegan')}
if(require(ggbiplot)==F){
if(require(devtools)==F){install.packages('devtools')}
require(devtools)
install_github("vqv/ggbiplot")
}
if(require(grid)==F){install.packages(grid)}
if(require(devEMF)==F){install.packages(devEMF)}
require(gplots)
require(ggplot2)
require(dplyr)
require(miscTools)
require(vegan)
require(ggbiplot)
require(grid)
require(devEMF)
####Set working directory (can copy from windows.REMEMBER: CHANGE \ (back slash) into / (forward slash) !!!)
# Directory where input files are located
# e.g. setwd("X:/Sven_Haange/2_R_Scripts/Test")
setwd("Documents/UFZ/Carla-Bioinformatik/")
###### INPUT: Load data
# IMPORTENT MAKE SURE YOUR CSV FILES HAVE CORRECT NAME, Decimal symbol must be "." and Seperator is ","
# 1st Column sample name, 2nd column sample group, further columns analyte data
raw_data <- read.csv(file="Test.csv", header = FALSE,sep=",")
## OPTIONAL: List of sample colours csv 1st column sample group names, 2nd column R colour names
colour_data <- read.csv(file="Test_colours.csv", header = TRUE ,sep=",")
### convert 0 values to NA (Boolean: TRUE or FALSE)
convert_to_NA <- FALSE
#############
### Export name and title of plots (string: "Proteomic data")
Export_name <- "Serum_Urin_data"
#############
####  PCA & NMDS settings
# Centre data for PCA (Boolean: TRUE or FALSE)
PCA_centre <- TRUE
# Scale data for PCA (Boolean: TRUE or FALSE)
PCA_scale <- TRUE
# Autotransform data for NMDS (TRUE or FALSE)
NMDS_auto_transform <- TRUE
##############
##### Return loadings for PCA axis
# i.e. the relative contribution of each analyte to axis (Boolean)
Loadings <- TRUE
## how many analyte loadings coloured (labelled) in loading scatterplot,
# as well as listed in bar charts
# (either: integer (e.g. 2) or string "all")
top_loadings <- 15
## label loadings with either number of analyte corresponding to table ("number"),
# or name of analyte ("name"), or no label ("none")
label_loadings <- "name"
# Size of loading labels (numeric)
loading_label_size <- 2
#############
#### Figure parameters
#Do you wish to define Group colours for plot (Boolean: TRUE or FALSE)
Define_group_colours <- TRUE
#Label samples in plot (Boolean: TRUE or FALSE)
label_samples_in_plot <- FALSE
#label size (good keep as point-size) (numeric)
label_size <- 2
# Point size and shape
point_size <- 2
point_shape <- 21
### Ellipse confidence plotting (Boolean: TRUE or FALSE)
Plot_ellipse <- TRUE
# confidence percentage (1-99) for stat ellipse (95 is good)
confidence_percentage <- 0.95
# type of calculation for ellipse "t" assumes a multivariate t-distribution,
# and "norm" assumes a multivariate normal distribution. "euclid". ("t","norm" or "euclid")
ellipse_type <- "t"
# calculte PCA ellipse areas (Boolean: TRUE or FALSE)
do_ellipse_areas <- TRUE
### Plot centroids
# plot centroid of ellipses (Boolean: TRUE or FALSE)
Plot_centroid <- FALSE
# connect centroids to samples with lines (Boolean: TRUE or FALSE)
Connect_points <- FALSE
# Centroid parameters (numeric)
centroid_size <- 5
centroid_shape <- 23
### Background colour for Plots (can use "ivory") (R colour name or R colour code)
Background_colour <- "whitesmoke"
# In PCA and NMDS plot show grid (Boolean: TRUE or FALSE)
grid_visible <- FALSE
### Width and height in cm of Boxplot export figures (numeric)
### (height is good as 10 width per sample approx 0.5 is good)
## e.g. Box_plot_width <- as.numeric(15)
plot_width <- as.numeric(15)
plot_height <- as.numeric(10)
#### Pairwise analysis
# should loadings be analyed in pairwise
# comparisons
pairwise_loadings <- TRUE
#For pairwise posthoc test choose p-value adjustment for multi testing method
# ("holm", "hochberg", "hommel", "bonferroni", "BH", "BY","fdr", "none")
p_adjust_methods <- "none"
# Do pairwise pca plots (Boolean: TRUE or FALSE)
pairwise_pca_plots <- TRUE
# Do pairwise nmds plots
pairwise_nmds_plots <- TRUE
############################################################
############################################################
############################################################
# Error messages
if(exists("raw_data") == FALSE){stop('No data input file !!! Please provide correct file name or check if working directory is correctly set')}
# Create results directory ------how to shiny????
dir.create(path=paste(getwd(),"/_Results_PCA_data_separation-",Export_name,sep=""))
results_folder <- paste(getwd(),"/_Results_PCA_data_separation-",Export_name,sep="")
### Default parameters:
if(exists("convert_to_NA") == FALSE){convert_to_NA <- FALSE}
# Statistics
if(exists("pairwise_analysis") == FALSE){pairwise_analysis <- FALSE}
if(exists("p_adjust_methods") == FALSE){p_adjust_methods <- "none"}
# Default settings for PCA & NMDS
if(exists("PCA_centre") == FALSE){PCA_centre <- TRUE}
if(exists("PCA_scale") == FALSE){PCA_scale <- TRUE}
if(exists("Loadings") == FALSE){Loadings <- FALSE}
if(exists("top_loadings") == FALSE){top_loadings <- 10}
if(exists("label_loadings") == FALSE){label_loadings <- "name"}
if(exists("loading_label_size") == FALSE){loading_label_size <- 2}
if(exists("Define_group_colours") == FALSE){Define_group_colours <- FALSE}
if(exists("colour_data") == FALSE){Define_group_colours <- FALSE}
if(exists("label_samples_in_plot") == FALSE){label_samples_in_plot <- FALSE}
if(exists("label_size") == FALSE){label_size <- 1}
if(exists("Plot_ellipse") == FALSE){Plot_ellipse <- TRUE}
if(exists("confidence_percentage") == FALSE){confidence_percentage <- 0.95}
if(exists("ellipse_type") == FALSE){ellipse_type <- "t"}
if(exists("do_ellipse_areas") == FALSE){do_ellipse_areas <- TRUE}
if(exists("point_size") == FALSE){point_size <- 1}
if(exists("point_shape") == FALSE){point_shape <- 1}
if(exists("grid_visible") == FALSE){grid_visible <- FALSE}
if(exists("Plot_centroid") == FALSE){Plot_centroid <- FALSE}
if(exists("Connect_points") == FALSE){Connect_points <- FALSE}
if(exists("centroid_size") == FALSE){centroid_size <- 3}
if(exists("centroid_shape") == FALSE){centroid_shape <- 8}
if(exists("plot_width") == FALSE){plot_width <- 15}
if(exists("plot_height") == FALSE){plot_height <- 10}
if(exists("Background_colour") == FALSE){Background_colour <- "whitesmoke"}
if(exists("Export_name")== FALSE){Export_name <- ""}
if(exists("pairwise_pca_plots")== FALSE){pairwise_pca_plots <- FALSE}
if(exists("pairwise_pca_plots")== FALSE){pairwise_loadings <- FALSE}
if(exists("pairwise_nmds_plots")== FALSE){pairwise_nmds_plots <- FALSE}
## Colour point edge black if fill colour present ------ how in shiny????
if(point_shape > 20){
point_colour_black <- TRUE
}else{
point_colour_black <- FALSE
}
##############################################################
##############################################################
##############################################################
# Correct data with new column names and change data to numeric
rawdata_2 <- raw_data
colnames(rawdata_2) [1:2] <- c("Sample","Group")
colnames(rawdata_2) [3:ncol(rawdata_2)] <- c(1:(ncol(raw_data)-2))
rawdata_3 <- rawdata_2[2:nrow(rawdata_2),]
rawdata_3[,3:ncol(rawdata_3)] <- lapply(rawdata_3[,3:ncol(rawdata_3)], function(x) as.numeric(as.character(x)))
rawdata <- rawdata_3
rownames(rawdata) <- c(1:nrow(rawdata))
# data frame to map analyte names at end (needed to avoid problems with certain characters used)
Analyte_names <- as.vector(raw_data[1,3:ncol(raw_data)])
Analyte_mapping <- as.data.frame(cbind(c(1:(ncol(raw_data)-2)),t(Analyte_names)))
rownames(Analyte_mapping) <- Analyte_mapping[,1]
colnames(Analyte_mapping) <- c("R_script","Analyte")
#################necessary map analyte names when keeping them as column names in shiny app?
#################why call both dfs raw data: rawdata and raw_data?????
# replace 0 with NA
if(convert_to_NA ==TRUE){rawdata[rawdata == 0] <- NA}
# data for mean, SD,SEM, CV etc see below
calculation_data <- rawdata ###why????
# Number of Groups and group names
unique_groups <- unique(rawdata[,2])
Number_of_Groups <- as.numeric(length (unique_groups))
groupdata <- as.data.frame(rawdata[,2])
Distinct_group_names <- distinct(groupdata)
# If group colours defined make colour vector
if(Define_group_colours == TRUE) {
colnames(colour_data) <- c("Group","Colour")
Group_colours <- as.vector(colour_data$Colour)
names(Group_colours) <- colour_data$Group
}
############################ PCA-plot
# Load data
rawdata[is.na(rawdata)] <- 0
data <- rawdata[ , colSums(rawdata != 0) != 0]
sample.data <- data[,3:ncol(data)]
sample.name <- data[, 1]
sample.group <- c(as.character(data [,2]))
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
sample.pca <- prcomp(sample.data, center = PCA_centre, scale. = PCA_scale)
# print method. The prcomp function returns an object of class prcomp, which have some methods available. The print method returns the standard deviation of each of the four PCs, and their rotation (or loadings), which are the coefficients of the linear combinations of the continuous variables."
print(sample.pca)
# plot pricipal component variances
plot(sample.pca, type = "l")
pdf(file.path(results_folder,'PCA_diagnostic.pdf'))
plot(sample.pca, type = "l")
dev.off()
emf(file.path(results_folder,'PCA_diagnostic.emf')) #saving not done yet in shiny r
plot(sample.pca, type = "l")
dev.off()
# summary method
summary(sample.pca)
# Variances
variances_pca <- as.vector((sample.pca$sdev)^2 / sum(sample.pca$sdev^2))
#Calculate significance CHANGE Column start CHANGE Grouping (raw_data$...)
if(min(sample.data)< 0) {
Diss_index_method = "euclidean"
}else{
Diss_index_method = "bray"
}
col_nr<- as.numeric(ncol(data))
Significance <- adonis(formula = data[, 3:col_nr] ~ data$Group, data = data, method = Diss_index_method)
stat_all <- Significance$aov.tab
stat_p <- as.numeric(stat_all[1,6])
### Post-hoc pairwise PERMANOVA (adonis)analysis
# Determine function:
pairwise.adonis <- function(x,factors, sim.function = 'vegdist', sim.method = Diss_index_method, p.adjust.m =p_adjust_methods)
{
library(vegan)
co = combn(unique(as.character(factors)),2)
pairs = c()
F.Model =c()
R2 = c()
p.value = c()
for(elem in 1:ncol(co)){
if(sim.function == 'daisy'){
library(cluster); x1 = daisy(x[factors %in% c(co[1,elem],co[2,elem]),],metric=sim.method)
} else{x1 = vegdist(x[factors %in% c(co[1,elem],co[2,elem]),],method=sim.method)}
ad = adonis(x1 ~ factors[factors %in% c(co[1,elem],co[2,elem])] );
pairs = c(pairs,paste(co[1,elem],'vs',co[2,elem]));
F.Model =c(F.Model,ad$aov.tab[1,4]);
R2 = c(R2,ad$aov.tab[1,5]);
p.value = c(p.value,ad$aov.tab[1,6])
}
p.adjusted = p.adjust(p.value,method=p.adjust.m)
sig = c(rep('',length(p.adjusted)))
sig[p.adjusted <= 1] <-'ns'
sig[p.adjusted <= 0.1] <-'.'
sig[p.adjusted <= 0.05] <-'*'
sig[p.adjusted <= 0.01] <-'**'
sig[p.adjusted <= 0.001] <-'***'
sig[p.adjusted <= 0.0001] <-'****'
pairw.res = data.frame(pairs,F.Model,R2,p.value,p.adjusted,sig)
print("Signif. codes:  0 '****' 0.0001 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 'ns' 1")
return(pairw.res)
}
posthoc_permanova <- pairwise.adonis(data[,3:ncol(data)],data$Group)
#export table as csv ##########to do in app
write.csv(posthoc_permanova,file=file.path(paste(results_folder,"/Posthoc-pairwise_permanova.csv",sep="")),row.names=TRUE)
#### plot PCA
#make data frame from PCA results
df_out <- as.data.frame(sample.pca$x)
df_out$Group <-sample.group
df_out$Sample <- sample.name
number_of_groups <- as.numeric(length(unique(sample.group)))
# calculte centroids of groups
centroids <- aggregate(cbind(PC1,PC2)~Group,df_out,mean)
df_connect <- merge(df_out,aggregate(cbind(mean.PC1=PC1,mean.PC2=PC2)~Group,df_out,mean),by="Group")
